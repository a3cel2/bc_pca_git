}
shinyApp(ui = ui, server = server)
shiny::runApp('Dropbox/Roth Lab/learning/shiny_R/downloads/code')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='a3cel2',
token='727F4DF4E33900AC6849533FF19015D8',
secret='y+QijR8ewanygu5OPeCIPT5OTn7XWR7u01oiAY9Q')
# 01-two-inputs
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Histogram of Random Normal Values"),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num), main = input$title)
})
}
shinyApp(ui = ui, server = server)
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R')
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R')
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R')
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R')
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R')
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R')
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R')
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/exploration/shiny_pca_ma.R')
getwed()
getwd()
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/exploration/shiny_pca_ma.R')
my_predictions
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/exploration/shiny_pca_ma.R')
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/exploration/shiny_pca_ma.R')
shinyApp(ui = ui, server = server)
?sliderInput
ui <- fluidPage(
sidebarPanel(
sliderInput('xsize', 'Point Size', 0,10,1,step=0.1)#,
#  selectInput('ycol', 'Y Variable', names(iris),
#              selected = names(iris)[[2]]),
#  numericInput('clusters', 'Cluster count', 3,
#               min = 1, max = 9),
#  numericInput('pointSize', 'Point Size', 3,
#               min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
pca_ma_prediction_plot(my_predictions,output_path = '',draw=T)
})
}
shinyApp(ui = ui, server = server)
?pca_ma_prediction_plot
i <- fluidPage(
sidebarPanel(
sliderInput('xsize', 'Point Size', 0,10,1,step=0.1)#,
#  selectInput('ycol', 'Y Variable', names(iris),
#              selected = names(iris)[[2]]),
#  numericInput('clusters', 'Cluster count', 3,
#               min = 1, max = 9),
#  numericInput('pointSize', 'Point Size', 3,
#               min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
pca_ma_prediction_plot(my_predictions,output_path = '',draw=T,point_size=input$size)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarPanel(
sliderInput('xsize', 'Point Size', 0,10,1,step=0.1)#,
#  selectInput('ycol', 'Y Variable', names(iris),
#              selected = names(iris)[[2]]),
#  numericInput('clusters', 'Cluster count', 3,
#               min = 1, max = 9),
#  numericInput('pointSize', 'Point Size', 3,
#               min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
pointSize <- reactive(input$size)
output$plot1 <- renderPlot({
pca_ma_prediction_plot(my_predictions,output_path = '',draw=T,point_size=pointSize())
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarPanel(
sliderInput('xsize', 'Point Size', 0,10,1,step=0.1)#,
#  selectInput('ycol', 'Y Variable', names(iris),
#              selected = names(iris)[[2]]),
#  numericInput('clusters', 'Cluster count', 3,
#               min = 1, max = 9),
#  numericInput('pointSize', 'Point Size', 3,
#               min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
pointSize <- reactive(input$size)
output$plot1 <- renderPlot({
pca_ma_prediction_plot(my_predictions,output_path = '',draw=T,point_size=10)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarPanel(
sliderInput('xsize', 'Point Size', 0,10,1,step=0.1)#,
#  selectInput('ycol', 'Y Variable', names(iris),
#              selected = names(iris)[[2]]),
#  numericInput('clusters', 'Cluster count', 3,
#               min = 1, max = 9),
#  numericInput('pointSize', 'Point Size', 3,
#               min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
pointSize <- reactive(input$size)
output$plot1 <- renderPlot({
plot(rnorm(pointSize()))
#pca_ma_prediction_plot(my_predictions,output_path = '',draw=T,point_size=pointSize())
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarPanel(
sliderInput('xsize', 'Point Size', 0,10,1)#,
#  selectInput('ycol', 'Y Variable', names(iris),
#              selected = names(iris)[[2]]),
#  numericInput('clusters', 'Cluster count', 3,
#               min = 1, max = 9),
#  numericInput('pointSize', 'Point Size', 3,
#               min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
pointSize <- reactive(input$size)
output$plot1 <- renderPlot({
plot(rnorm(pointSize()))
#pca_ma_prediction_plot(my_predictions,output_path = '',draw=T,point_size=pointSize())
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarPanel(
sliderInput('xsize', 'Point Size', 0,10,1)#,
#  selectInput('ycol', 'Y Variable', names(iris),
#              selected = names(iris)[[2]]),
#  numericInput('clusters', 'Cluster count', 3,
#               min = 1, max = 9),
#  numericInput('pointSize', 'Point Size', 3,
#               min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
pointSize <- reactive(input$xsize)
output$plot1 <- renderPlot({
pca_ma_prediction_plot(my_predictions,output_path = '',draw=T,point_size=pointSize())
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarPanel(
sliderInput('xsize', 'Point Size', 0,10,1,step = 0.1)#,
#  selectInput('ycol', 'Y Variable', names(iris),
#              selected = names(iris)[[2]]),
#  numericInput('clusters', 'Cluster count', 3,
#               min = 1, max = 9),
#  numericInput('pointSize', 'Point Size', 3,
#               min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
pointSize <- reactive(input$xsize)
output$plot1 <- renderPlot({
pca_ma_prediction_plot(my_predictions,output_path = '',draw=T,point_size=pointSize())
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarPanel(
sliderInput('xsize', 'Point Size', 0,10,1,step = 0.1),
sliderInput('point_red', 'Point colour red', 0,1,0.5,step = 1/255),
sliderInput('point_green', 'Point colour red', 0,1,0.5,step = 1/255),
sliderInput('point_blue', 'Point colour red', 0,1,0.5,step = 1/255)
#,
#  selectInput('ycol', 'Y Variable', names(iris),
#              selected = names(iris)[[2]]),
#  numericInput('clusters', 'Cluster count', 3,
#               min = 1, max = 9),
#  numericInput('pointSize', 'Point Size', 3,
#               min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
#pointSize <- reactive(input$xsize)
output$plot1 <- renderPlot({
pca_ma_prediction_plot(my_predictions,output_path = '',draw=T,
point_size=input$xsize)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarPanel(
sliderInput('xsize', 'Point Size', 0,10,1,step = 0.1),
sliderInput('point_red', 'Point colour red', 0,1,0.5,step = 1/255),
sliderInput('point_green', 'Point colour green', 0,1,0.5,step = 1/255),
sliderInput('point_blue', 'Point colour blue', 0,1,0.5,step = 1/255)
#,
#  selectInput('ycol', 'Y Variable', names(iris),
#              selected = names(iris)[[2]]),
#  numericInput('clusters', 'Cluster count', 3,
#               min = 1, max = 9),
#  numericInput('pointSize', 'Point Size', 3,
#               min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
#pointSize <- reactive(input$xsize)
output$plot1 <- renderPlot({
pca_ma_prediction_plot(my_predictions,output_path = '',draw=T,
point_size=input$xsize,
point_colours=rgb(input$point_red,input$point_green,input$point_blue))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarPanel(
sliderInput('xsize', 'Point Size', 0,10,1,step = 0.1),
sliderInput('point_red', 'Point colour red', 0,1,0.5,step = 1/255),
sliderInput('point_green', 'Point colour green', 0,1,0.5,step = 1/255),
sliderInput('point_blue', 'Point colour blue', 0,1,0.5,step = 1/255),
sliderInput('point_transparent', 'Point colour transparency', 0,1,0.5,step = 1/255)
#,
#  selectInput('ycol', 'Y Variable', names(iris),
#              selected = names(iris)[[2]]),
#  numericInput('clusters', 'Cluster count', 3,
#               min = 1, max = 9),
#  numericInput('pointSize', 'Point Size', 3,
#               min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
#pointSize <- reactive(input$xsize)
output$plot1 <- renderPlot({
pca_ma_prediction_plot(my_predictions,output_path = '',draw=T,
point_size=input$xsize,
point_colours=rgb(input$point_red,
input$point_green,
input$point_blue,
input$point_transparent))
})
}
shinyApp(ui = ui, server = server)
library(devtools)
library(shiny)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
devtools::load_all('../../packages/bcPcaAnalysis')
devtools::document('../../packages/bcPcaAnalysis')
#pca_enhanced_calls = '/Users/Albi/Dropbox/barcoded-PCA/2015-08-30/Additional.file.11.txt'
#pca_depleted_calls = '/Users/Albi/Dropbox/barcoded-PCA/2015-08-30/Additional.file.10.txt'
pca_universe = '/Users/Albi/Dropbox/barcoded-PCA/2015-08-30/Additional.file.6.txt'
expression_file = '/Users/Albi/Dropbox/barcoded-PCA/2015-08-30/Additional.file.14.txt'
protein_abundance_file = "/Users/Albi/Dropbox/Roth Lab/projects/bc_pca_git/data/paxdb_abundance.tsv"
#output_path <- '../results/master_output'
my_predictions <- pca_ma_prediction(pca_universe
,protein_abundance_file,
expression_file,'ethanol',
expression_condition_regexp='Ethanol.4h')
ui <- fluidPage(
#   sidebarPanel(
#     sliderInput('xsize', 'Point Size', 0,10,1,step = 0.1),
#     sliderInput('point_red', 'Point colour red', 0,1,0.5,step = 1/255),
#     sliderInput('point_green', 'Point colour green', 0,1,0.5,step = 1/255),
#     sliderInput('point_blue', 'Point colour blue', 0,1,0.5,step = 1/255),
#     sliderInput('point_transparent', 'Point colour transparency', 0,1,0.5,step = 1/255)
#     #,
#   #  selectInput('ycol', 'Y Variable', names(iris),
#   #              selected = names(iris)[[2]]),
#   #  numericInput('clusters', 'Cluster count', 3,
#   #               min = 1, max = 9),
#   #  numericInput('pointSize', 'Point Size', 3,
#   #               min = 1, max = 9)
#   ),
mainPanel(
plotOutput('plot1'),
sliderInput('xsize', 'Point Size', 0,10,1,step = 0.1),
sliderInput('point_red', 'Point colour red', 0,1,0.5,step = 1/255),
sliderInput('point_green', 'Point colour green', 0,1,0.5,step = 1/255),
sliderInput('point_blue', 'Point colour blue', 0,1,0.5,step = 1/255),
sliderInput('point_transparent', 'Point colour transparency', 0,1,0.5,step = 1/255)
)
)
server <- function(input, output) {
#pointSize <- reactive(input$xsize)
output$plot1 <- renderPlot({
pca_ma_prediction_plot(my_predictions,output_path = '',draw=T,
point_size=input$xsize,
point_colours=rgb(input$point_red,
input$point_green,
input$point_blue,
input$point_transparent))
})
}
shinyApp(ui = ui, server = server)
shiny::runApp('shiny_pca_ma')
shiny::runApp('shiny_pca_ma')
getwd()
shiny::runApp('shiny_pca_ma')
cbind(rnorm(3),rnorm(3))
a <- cbind(rnorm(3),rnorm(3))
b <- cbind(rnorm(3),rnorm(3))
a
b
merge(a,b)
colnames(a) <- c('a','b')
colnames(b) <- c('c','d')
merge(a,b)
shiny::runApp('shiny_pca_ma')
shiny::runApp('shiny_pca_ma')
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
?renderImage
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
install.packages('devtools')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
library(cairo)
library(Cairo)
CairoPDF
CairoPNG
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
?reactive
?tabPanel
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
?renderImage
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
source('global.R')
getwd()
source('exploration/shiny_pca_ma/global.R')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
?textOutput
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
?mainPanel
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
help(pca_ma_prediction_plot)
shiny::runApp('exploration/shiny_pca_ma')
shiny::runApp('exploration/shiny_pca_ma')
source('~/Dropbox/Roth Lab/projects/bc_pca_git/packages/bcPcaAnalysis/R/mass_action_prediction.R')
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R')
?pca_ma_precision_plot
help(pca_ma_precision_plot)
?bcPcaAnalysis
??bcPcaAnalysis
devtools::load_all('../../../packages/bcPcaAnalysis')
devtools::document('../../../packages/bcPcaAnalysis')
shiny::runApp('exploration/shiny_pca_ma_precision')
help(pca_ma_precision_plot)
pca_ma_precision_plot()
?pca_ma_precision_plot()
?reactive()
shiny::runApp('exploration/shiny_pca_ma_precision')
shiny::runApp('exploration/shiny_pca_ma_precision')
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R')
shiny::runApp('exploration/shiny_pca_ma_precision')
source('~/Dropbox/Roth Lab/projects/bc_pca_git/packages/bcPcaAnalysis/R/mass_action_prediction.R')
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R')
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R')
library(ROCR)
?prediction
head(my_predictions)
abs(bcPCA_FC.AVG) > 0.25
abs(my_predictions$bcPCA_FC.AVG) > 0.25
head(my_predictions)
abs(my_predictions$bcPCA_FC.AVG) => 0.25 & my_predictions$bcPCA_qVal <= 0.05
abs(my_predictions$bcPCA_FC.AVG) => 0.25
abs(my_predictions$bcPCA_FC.AVG) > 0.25
abs(my_predictions$bcPCA_FC.AVG) >= 0.25 & my_predictions$bcPCA_qVal <= 0.05
head(my_predictions)
rocr_ma <- prediction(my_predictions$Log2_MA_prediction,abs(my_predictions$bcPCA_FC.AVG) >= 0.25 & my_predictions$bcPCA_qVal <= 0.05)
plot(performance(rocr_ma))
plot(performance(rocr_ma),measir)
plot(performance(rocr_ma),measure=
'precision')
plot(performance(rocr_ma),measure='precision')
plot(performance(rocr_ma,measure='precision'))
?performance
plot(performance(rocr_ma,measure='prec'))
rocr_ma <- prediction(abs(my_predictions$Log2_MA_prediction),abs(my_predictions$bcPCA_FC.AVG) >= 0.25 & my_predictions$bcPCA_qVal <= 0.05)
plot(performance(rocr_ma,measure='prec'))
plot(performance(rocr_ma,x.measure='prec'))
plot(performance(rocr_ma,x.measure='prec',measure='rec'))
plot(performance(rocr_ma,x.measure='rec',measure='prec'))
plot(performance(rocr_ma,x.measure='tpr',measure='prec'))
plot(performance(rocr_ma,x.measure='tpr',measure='fpr'))
abline(c(0,1))
plot(performance(rocr_ma,measure='auc'))
performance(rocr_ma,measure='auc')
rocr_ma_fake <- prediction(sample(my_predictions$Log2_MA_prediction),abs(my_predictions$bcPCA_FC.AVG) >= 0.25 & my_predictions$bcPCA_qVal <= 0.05)
performance(rocr_ma_fake,measure='auc')
plot(performance(rocr_ma,x.measure='rec',measure='prec'))
plot(performance(rocr_ma_fake,x.measure='rec',measure='prec'))
rocr_ma <- prediction(my_predictions$Log2_MA_prediction,my_predictions$bcPCA_FC.AVG >= 0.25 & my_predictions$bcPCA_qVal <= 0.05)
plot(performance(rocr_ma,x.measure='rec',measure='prec'))
rocr_ma <- prediction(my_predictions$Log2_MA_prediction,my_predictions$bcPCA_FC.AVG <= -0.25 & my_predictions$bcPCA_qVal <= 0.05)
plot(performance(rocr_ma,x.measure='rec',measure='prec'))
rocr_ma <- prediction((-1)*my_predictions$Log2_MA_prediction,my_predictions$bcPCA_FC.AVG <= -0.25 & my_predictions$bcPCA_qVal <= 0.05)
plot(performance(rocr_ma,x.measure='rec',measure='prec'))
performance(rocr_ma,measure='auc')
plot(performance(rocr_ma,x.measure='tpr',measure='fpr'))
plot(performance(rocr_ma,x.measure='fpr',measure='tpr'))
rocr_ma_fake <- prediction(sample((-1)*my_predictions$Log2_MA_prediction),my_predictions$bcPCA_FC.AVG <= -0.25 & my_predictions$bcPCA_qVal <= 0.05)
plot(performance(rocr_ma_fake,x.measure='fpr',measure='tpr'))
abline(c(0,1))
plot(performance(rocr_ma,x.measure='fpr',measure='tpr'))
lines(performance(rocr_ma_fake,x.measure='fpr',measure='tpr'))
plot(performance(rocr_ma,x.measure='fpr',measure='tpr'),add=T)
plot(performance(rocr_ma_fake,x.measure='fpr',measure='tpr'),add=T)
rocr_ma_enh <- prediction(my_predictions$Log2_MA_prediction,my_predictions$bcPCA_FC.AVG >= 0.25 & my_predictions$bcPCA_qVal <= 0.05)
plot(performance(rocr_ma_enh,x.measure='fpr',measure='tpr'),add=T)
plot(rnorm(10))
legend(2,-2)
?legend
legend(x=2,y=-2,legend=c('A','B'),fill=c('red','green'))
legend(x=2,y=1,legend=c('A','B'),fill=c('red','green'))
legend(x=1.5,y=1.5,legend=c('A','B'),fill=c('red','green'))
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R')
shiny::runApp('exploration/shiny_pca_ma_precision')
shiny::runApp('exploration/shiny_pca_ma_precision')
shiny::runApp('exploration/shiny_pca_ma_precision')
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R')
?smoothScatter
smoothscater(rnorm(100),rnorm(100))
smoothscatter(rnorm(100),rnorm(100))
smoothScatter(rnorm(100),rnorm(100))
smoothScatter(rnorm(1000),rnorm(1000))
smoothScatter(rnorm(10000),rnorm(10000))
shiny::runApp('exploration/shiny_pca_ma_precision')
shiny::runApp('exploration/shiny_pca_ma_precision')
