cond_hubs <- unique(filter(subset_df,q.value.BH. < p_cutoff)$Hub)
return(length(cond_hubs)/length(all_hubs))
})
hub_proportion <- as.data.frame(hub_proportion)
hub_proportion <- cbind(rownames(hub_proportion),hub_proportion)
colnames(hub_proportion) <- c('Condition','Proportion of Concerted Hubs')
order <- sort(hub_proportion$`Proportion of Concerted Hubs`,
index.return=T,
decreasing=T)$ix
#hub_proportion <- hub_proportion[order,]
hub_proportion$Condition <- factor(hub_proportion$Condition,
levels=hub_proportion$Condition[order])
#levels(hub_proportion$Condition) <- hub_proportion$Condition[order]
ggplot(data=hub_proportion,aes(x=Condition,
y=`Proportion of Concerted Hubs`,width=.8)) +
ggtitle(title) +
geom_bar(stat="identity",fill="snow2",colour="black") +
ggplot2::scale_y_continuous(expand = c(0,0),
limits=c(0,max(hub_proportion$`Proportion of Concerted Hubs`)*1.05)) +
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = "white"),
legend.position=c(0.8,0.8),
legend.text = ggplot2::element_text(size=15),
legend.title = ggplot2::element_text(size=20,hjust=0),
text = ggplot2::element_text(size=25),
axis.text.x = ggplot2::element_text(angle=90, hjust=1,vjust=0.5),
axis.line.x = ggplot2::element_line(size = 1, linetype = "solid", colour = "black"),
axis.line.y = ggplot2::element_line(size = 1, linetype = "solid", colour = "black"))
}
Cairo::CairoPDF(file=paste(c(connectivity_output_path,'hub_bias_over_conds.pdf'),collapse='/'),width=8,height=8)
bias_over_conditions(hub_df)
dev.off()
ggplot2::ggplot(data=hub_proportion,ggplot2::aes(x=Condition,
y=`Proportion of Concerted Hubs`,width=.8)) +
ggplot2::ggtitle(title) +
ggplot2::ylab('Proportion of Concerted Hubs\n') +
ggplot2::xlab('\nConditions') +
geom_bar(stat="identity",fill="snow2",colour="black") +
ggplot2::scale_y_continuous(expand = c(0,0),
limits=c(0,max(hub_proportion$`Proportion of Concerted Hubs`)*1.05)) +
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = "white"),
legend.position=c(0.8,0.8),
legend.text = ggplot2::element_text(size=15),
legend.title = ggplot2::element_text(size=20,hjust=0),
text = ggplot2::element_text(size=25),
axis.text.x = ggplot2::element_text(angle=90, hjust=1,vjust=0.5),
axis.line.x = ggplot2::element_line(size = 1, linetype = "solid", colour = "black"),
axis.line.y = ggplot2::element_line(size = 1, linetype = "solid", colour = "black"))
conditions <- levels(hub_df$Condition)
hub_proportion <- sapply(conditions,function(condition){
subset_df <- dplyr::filter(hub_df,Condition==condition)
all_hubs <- unique(subset_df$Hub)
cond_hubs <- unique(filter(subset_df,q.value.BH. < p_cutoff)$Hub)
return(length(cond_hubs)/length(all_hubs))
})
hub_proportion <- as.data.frame(hub_proportion)
hub_proportion <- cbind(rownames(hub_proportion),hub_proportion)
colnames(hub_proportion) <- c('Condition','Proportion of Concerted Hubs')
order <- sort(hub_proportion$`Proportion of Concerted Hubs`,
index.return=T,
decreasing=T)$ix
#hub_proportion <- hub_proportion[order,]
hub_proportion$Condition <- factor(hub_proportion$Condition,
levels=hub_proportion$Condition[order])
#levels(hub_proportion$Condition) <- hub_proportion$Condition[order]
ggplot2::ggplot(data=hub_proportion,ggplot2::aes(x=Condition,
y=`Proportion of Concerted Hubs`,width=.8)) +
ggplot2::ggtitle(title) +
ggplot2::ylab('Proportion of Concerted Hubs\n') +
ggplot2::xlab('\nConditions') +
geom_bar(stat="identity",fill="snow2",colour="black") +
ggplot2::scale_y_continuous(expand = c(0,0),
limits=c(0,max(hub_proportion$`Proportion of Concerted Hubs`)*1.05)) +
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = "white"),
legend.position=c(0.8,0.8),
legend.text = ggplot2::element_text(size=15),
legend.title = ggplot2::element_text(size=20,hjust=0),
text = ggplot2::element_text(size=25),
axis.text.x = ggplot2::element_text(angle=90, hjust=1,vjust=0.5),
axis.line.x = ggplot2::element_line(size = 1, linetype = "solid", colour = "black"),
axis.line.y = ggplot2::element_line(size = 1, linetype = "solid", colour = "black"))
p_cutoff=0.05
title="Proportion of concerted hubs\nover different conditions"
conditions <- levels(hub_df$Condition)
hub_proportion <- sapply(conditions,function(condition){
subset_df <- dplyr::filter(hub_df,Condition==condition)
all_hubs <- unique(subset_df$Hub)
cond_hubs <- unique(filter(subset_df,q.value.BH. < p_cutoff)$Hub)
return(length(cond_hubs)/length(all_hubs))
})
hub_proportion <- as.data.frame(hub_proportion)
hub_proportion <- cbind(rownames(hub_proportion),hub_proportion)
colnames(hub_proportion) <- c('Condition','Proportion of Concerted Hubs')
order <- sort(hub_proportion$`Proportion of Concerted Hubs`,
index.return=T,
decreasing=T)$ix
#hub_proportion <- hub_proportion[order,]
hub_proportion$Condition <- factor(hub_proportion$Condition,
levels=hub_proportion$Condition[order])
#levels(hub_proportion$Condition) <- hub_proportion$Condition[order]
ggplot2::ggplot(data=hub_proportion,ggplot2::aes(x=Condition,
y=`Proportion of Concerted Hubs`,width=.8)) +
ggplot2::ggtitle(title) +
ggplot2::ylab('Proportion of Concerted Hubs\n') +
ggplot2::xlab('\nConditions') +
geom_bar(stat="identity",fill="snow2",colour="black") +
ggplot2::scale_y_continuous(expand = c(0,0),
limits=c(0,max(hub_proportion$`Proportion of Concerted Hubs`)*1.05)) +
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = "white"),
legend.position=c(0.8,0.8),
legend.text = ggplot2::element_text(size=15),
legend.title = ggplot2::element_text(size=20,hjust=0),
text = ggplot2::element_text(size=25),
axis.text.x = ggplot2::element_text(angle=90, hjust=1,vjust=0.5),
axis.line.x = ggplot2::element_line(size = 1, linetype = "solid", colour = "black"),
axis.line.y = ggplot2::element_line(size = 1, linetype = "solid", colour = "black"))
Cairo::CairoPDF(file=paste(c(connectivity_output_path,'hub_bias_over_conds.pdf'),collapse='/'),width=8,height=8)
bias_over_conditions(hub_df)
dev.off()
library(devtools)
library(Cairo)
library(dplyr)
library(grDevices)
library(xlsx)
library(rmarkdown)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
#Parts of analysis to run
#Options:
#Atorvastatin enrichment
#GO enrichment
to_run <- c('Frequency Perturbation')#c('Atorvastatin enrichment')
#Markdown directory
#Package containing necessary scripts
devtools::load_all('../packages/bcPcaAnalysis')
devtools::document('../packages/bcPcaAnalysis')
#Global parameters
pca_universe = '/Users/Albi/Dropbox/barcoded-PCA/2015-08-30/Additional.file.6.txt'
pca_enhanced_calls = '/Users/Albi/Dropbox/barcoded-PCA/2015-08-30/Additional.file.10.txt'
pca_depleted_calls = '/Users/Albi/Dropbox/barcoded-PCA/2015-08-30/Additional.file.11.txt'
go_association_file = '/Users/Albi/Dropbox/Roth Lab/projects/bc_pca_git/data/funcassociate_go_associations.txt'
protein_abundance_file = "/Users/Albi/Dropbox/Roth Lab/projects/bc_pca_git/data/paxdb_abundance.tsv"
expression_file = '/Users/Albi/Dropbox/barcoded-PCA/2015-08-30/Additional.file.14.txt'
hub_enrichment_file = '/Users/Albi/Dropbox/barcoded-PCA/2015-09-02/Data for Figure 3D.xlsx'
output_path <- '../results/master_output'
saved_parameter_path <- '../data/script_input'
heatmap_cluster_file <- 'cluster1_heatmap.tsv'
figure_path <- '../results/rmarkdown_figures'
#Color scale for a lot of stuff
my_color_list <- c(
rgb(1,0.45,0.25),
rgb(0.8,0.25,0.25),
rgb(0,0,0),
rgb(0.25,0.45,0.8),
rgb(0.25,0.75,1)
)
blue_black_orange <- grDevices::colorRampPalette(my_color_list)
connectivity_output_path <- paste(c(output_path,'connectivity'),collapse='/')
dir.create(connectivity_output_path, showWarnings = FALSE)
#Number of simulations for estimating connectivity
connectivity_iterations <- 1000
pca_universe <- read.table(pca_universe,head=T,sep='\t')
pca_enhanced <- read.table(pca_enhanced_calls,head=T,sep='\t')
pca_depleted <- read.table(pca_depleted_calls,head=T,sep='\t')
hub_df <- xlsx::read.xlsx2(hub_enrichment_file,sheetName = "Sheet1", colClasses=c("character","character",rep("numeric",5)))
Cairo::CairoPDF(file=paste(c(connectivity_output_path,'hub_bias_over_conds.pdf'),collapse='/'),width=8,height=8)
bias_over_conditions(hub_df)
dev.off()
bias_over_conditions <- function(hub_df,
p_cutoff=0.05,
title="Proportion of concerted hubs\nover different conditions"){
conditions <- levels(hub_df$Condition)
hub_proportion <- sapply(conditions,function(condition){
subset_df <- dplyr::filter(hub_df,Condition==condition)
all_hubs <- unique(subset_df$Hub)
cond_hubs <- unique(filter(subset_df,q.value.BH. < p_cutoff)$Hub)
return(length(cond_hubs)/length(all_hubs))
})
hub_proportion <- as.data.frame(hub_proportion)
hub_proportion <- cbind(rownames(hub_proportion),hub_proportion)
colnames(hub_proportion) <- c('Condition','Proportion of Concerted Hubs')
order <- sort(hub_proportion$`Proportion of Concerted Hubs`,
index.return=T,
decreasing=T)$ix
#hub_proportion <- hub_proportion[order,]
hub_proportion$Condition <- factor(hub_proportion$Condition,
levels=hub_proportion$Condition[order])
#levels(hub_proportion$Condition) <- hub_proportion$Condition[order]
ggplot2::ggplot(data=hub_proportion,ggplot2::aes(x=Condition,
y=`Proportion of Concerted Hubs`,width=.7)) +
ggplot2::ggtitle(title) +
ggplot2::ylab('Proportion of Concerted Hubs\n') +
ggplot2::xlab('\nConditions') +
geom_bar(stat="identity",fill="snow2",colour="black") +
ggplot2::scale_y_continuous(expand = c(0,0),
limits=c(0,max(hub_proportion$`Proportion of Concerted Hubs`)*1.05)) +
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = "white"),
legend.position=c(0.8,0.8),
legend.text = ggplot2::element_text(size=15),
legend.title = ggplot2::element_text(size=20,hjust=0),
text = ggplot2::element_text(size=25),
axis.text.x = ggplot2::element_text(angle=90, hjust=1,vjust=0.5),
axis.line.x = ggplot2::element_line(size = 1, linetype = "solid", colour = "black"),
axis.line.y = ggplot2::element_line(size = 1, linetype = "solid", colour = "black"))
}
Cairo::CairoPDF(file=paste(c(connectivity_output_path,'hub_bias_over_conds.pdf'),collapse='/'),width=8,height=8)
bias_over_conditions(hub_df)
dev.off()
bias_over_conditions <- function(hub_df,
p_cutoff=0.05,
title="Proportion of concerted hubs\nover different conditions"){
conditions <- levels(hub_df$Condition)
hub_proportion <- sapply(conditions,function(condition){
subset_df <- dplyr::filter(hub_df,Condition==condition)
all_hubs <- unique(subset_df$Hub)
cond_hubs <- unique(filter(subset_df,q.value.BH. < p_cutoff)$Hub)
return(length(cond_hubs)/length(all_hubs))
})
hub_proportion <- as.data.frame(hub_proportion)
hub_proportion <- cbind(rownames(hub_proportion),hub_proportion)
colnames(hub_proportion) <- c('Condition','Proportion of Concerted Hubs')
order <- sort(hub_proportion$`Proportion of Concerted Hubs`,
index.return=T,
decreasing=T)$ix
#hub_proportion <- hub_proportion[order,]
hub_proportion$Condition <- factor(hub_proportion$Condition,
levels=hub_proportion$Condition[order])
#levels(hub_proportion$Condition) <- hub_proportion$Condition[order]
ggplot2::ggplot(data=hub_proportion,ggplot2::aes(x=Condition,
y=`Proportion of Concerted Hubs`,width=.7)) +
ggplot2::ggtitle(title) +
ggplot2::ylab('Proportion of Concerted Hubs\n') +
ggplot2::xlab('\nConditions') +
geom_bar(stat="identity",fill="snow2",colour="black") +
ggplot2::scale_y_continuous(expand = c(0,0),
limits=c(0,max(hub_proportion$`Proportion of Concerted Hubs`)*1.05)) +
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = "white"),
legend.position=c(0.8,0.8),
#legend.text = ggplot2::element_text(size=15),
legend.title = ggplot2::element_text(size=20,hjust=0),
text = ggplot2::element_text(size=20),
axis.text.x = ggplot2::element_text(angle=90, hjust=1,vjust=0.5),
axis.line.x = ggplot2::element_line(size = 1, linetype = "solid", colour = "black"),
axis.line.y = ggplot2::element_line(size = 1, linetype = "solid", colour = "black"))
}
Cairo::CairoPDF(file=paste(c(connectivity_output_path,'hub_bias_over_conds.pdf'),collapse='/'),width=8,height=8)
bias_over_conditions(hub_df)
dev.off()
bias_over_conditions <- function(hub_df,
p_cutoff=0.05,
title="Proportion of concerted hubs\nover different conditions"){
conditions <- levels(hub_df$Condition)
hub_proportion <- sapply(conditions,function(condition){
subset_df <- dplyr::filter(hub_df,Condition==condition)
all_hubs <- unique(subset_df$Hub)
cond_hubs <- unique(filter(subset_df,q.value.BH. < p_cutoff)$Hub)
return(length(cond_hubs)/length(all_hubs))
})
hub_proportion <- as.data.frame(hub_proportion)
hub_proportion <- cbind(rownames(hub_proportion),hub_proportion)
colnames(hub_proportion) <- c('Condition','Proportion of Concerted Hubs')
order <- sort(hub_proportion$`Proportion of Concerted Hubs`,
index.return=T,
decreasing=T)$ix
#hub_proportion <- hub_proportion[order,]
hub_proportion$Condition <- factor(hub_proportion$Condition,
levels=hub_proportion$Condition[order])
#levels(hub_proportion$Condition) <- hub_proportion$Condition[order]
ggplot2::ggplot(data=hub_proportion,ggplot2::aes(x=Condition,
y=`Proportion of Concerted Hubs`,width=.7)) +
ggplot2::ggtitle(title) +
ggplot2::ylab('Proportion of Concerted Hubs\n') +
ggplot2::xlab('\nConditions') +
geom_bar(stat="identity",fill="snow4",colour="black") +
ggplot2::scale_y_continuous(expand = c(0,0),
limits=c(0,max(hub_proportion$`Proportion of Concerted Hubs`)*1.05)) +
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = "white"),
legend.position=c(0.8,0.8),
#legend.text = ggplot2::element_text(size=15),
legend.title = ggplot2::element_text(size=20,hjust=0),
text = ggplot2::element_text(size=20),
axis.text.x = ggplot2::element_text(angle=90, hjust=1,vjust=0.5),
axis.line.x = ggplot2::element_line(size = 1, linetype = "solid", colour = "black"),
axis.line.y = ggplot2::element_line(size = 1, linetype = "solid", colour = "black"))
}
Cairo::CairoPDF(file=paste(c(connectivity_output_path,'hub_bias_over_conds.pdf'),collapse='/'),width=8,height=8)
bias_over_conditions(hub_df)
dev.off()
pca_ma_prediction_plot(my_predictions,expression_pca_output_path)
expression_pca_output_path <- paste(c(output_path,'expression_pca'),collapse='/')
my_predictions <- pca_ma_prediction(pca_universe,protein_abundance_file,expression_file,'ethanol',expression_condition_regexp='Ethanol.4h')
pca_universe = '/Users/Albi/Dropbox/barcoded-PCA/2015-08-30/Additional.file.6.txt'
pca_enhanced_calls = '/Users/Albi/Dropbox/barcoded-PCA/2015-08-30/Additional.file.10.txt'
pca_depleted_calls = '/Users/Albi/Dropbox/barcoded-PCA/2015-08-30/Additional.file.11.txt'
go_association_file = '/Users/Albi/Dropbox/Roth Lab/projects/bc_pca_git/data/funcassociate_go_associations.txt'
protein_abundance_file = "/Users/Albi/Dropbox/Roth Lab/projects/bc_pca_git/data/paxdb_abundance.tsv"
expression_file = '/Users/Albi/Dropbox/barcoded-PCA/2015-08-30/Additional.file.14.txt'
hub_enrichment_file = '/Users/Albi/Dropbox/barcoded-PCA/2015-09-02/Data for Figure 3D.xlsx'
output_path <- '../results/master_output'
saved_parameter_path <- '../data/script_input'
heatmap_cluster_file <- 'cluster1_heatmap.tsv'
figure_path <- '../results/rmarkdown_figures'
expression_pca_output_path <- paste(c(output_path,'expression_pca'),collapse='/')
my_predictions <- pca_ma_prediction(pca_universe,protein_abundance_file,expression_file,'ethanol',expression_condition_regexp='Ethanol.4h')
attr(pca_ma_prediction_plot())
attr(pca_ma_prediction_plot())
attr(pca_ma_prediction_plot)
args(pca_ma_prediction_plot)
#Remove overly noisy measurements
#d
#fdfddsf
for(i in 1:1000){}
for(i in 1:1000000000){}
for(i in 1:1000000){}
for(i in 1:10000000){}
for(i in 1:100000000){}
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R', echo=TRUE)
pca_ma_prediction_plot(four_hr_predictions,expression_pca_output_path,filename="bcPCA_mRNA_predictions_4hr.pdf")
4-3.25
choose(6000,3)
choose(6600,3)
log10(choose(6600,3))
log10(choose(5600,3))
log10(choose(5600,5))
(1-0.18)
(1-0.18)*(1-0.15)
1-(1-0.18)*(1-0.15)
(1-0.18)*(1-0.15)
(1-0.18)
(1-0.18)
15*(1-0.18)
choose(6000,3)
choose(6000,4)
choose(6000,5)
50*2.51
60*2.51
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/random_progeny.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/random_progeny.R', echo=TRUE)
dev.off()
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/random_progeny.R', echo=TRUE)
dev.off()
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/random_progeny.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/random_progeny.R', echo=TRUE)
dev.off()
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/random_progeny.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/random_progeny.R', echo=TRUE)
dev.off()
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/random_progeny.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/random_progeny.R', echo=TRUE)
dev.off()
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/random_progeny.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/random_progeny.R', echo=TRUE)
dev.off()
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/illustration/random_progeny.R', echo=TRUE)
help(summary.lm)
lm.D9
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1)
summary(lm.D9.)
summary(lm.D9)
summary(lm.D9)
anova(lm.D9)
?drop1
librar(grdevices)
library(grdevices)
library(grDevices)
source('~/.active-rstudio-document', echo=TRUE)
0:1
seq(0,1,0.1)
sapply(1:length(mics),function(x){
seq(0,1,0.1)
})
mics <- c(0.3,0.9,0.1,0.1)
sapply(1:length(mics),function(x){
seq(0,1,0.1)
})
t(sapply(1:length(mics),function(x){
seq(0,1,0.1)
}))
derp <- t(sapply(1:length(mics),function(x){
seq(0,1,0.1)
}))
1/(1+derp[1,])
1/(1+(derp[1,])+mics[1])
derp <- t(sapply(1:length(mics),function(x){
seq(0,3,0.3)
}))
1/(1+derp[1,])
derp[1,]
1/(1+2^derp[1,])
1/(1+derp[1,])
derp <- t(sapply(1:length(mics),function(x){
seq(0,5,0.5)
}))
1/(1+derp[1,])
1/(1+(derp[1,]-0.9))
derp[1,]
1/(1+5*derp[1,])
source('~/.active-rstudio-document', echo=TRUE)
ret_heatmap
heatmap(ret_heatmap,scale=F,Rowv=NA,Colv=NA)
heatmap(ret_heatmap)
heatmap(ret_heatmap,scale=NA,Rowv=NA,Colv=NA)
heatmap(ret_heatmap,scale='none',Rowv=NA,Colv=NA)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
blueblack
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?heatmap
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
derp
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
?heatmap
library(gplots)
heatmap.2(ret_heatmap,
scale='none',
Rowv=NA,
Colv=NA,
col=blueblack(100),
cexCol=0.01)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
?heatmap
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
?heatmap
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
dev.off()
dev.off()
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/twas_git/scripts/demos/dummy_heatmap_for_inhibition.R', echo=TRUE)
2^8
2^16
sample(1:256,3000)
length(unique(sample(1:256,3000,replace=T)))
length(unique(sample(1:256,3000,replace=T)))
length(unique(sample(1:256,3000,replace=T)))
length(unique(sample(1:256,3000,replace=T)))
length(unique(sample(1:256,300,replace=T)))
length(unique(sample(1:256,300,replace=T)))
length(unique(sample(1:256,300,replace=T)))
length(unique(sample(1:256,300,replace=T)))
sample(c(1:3,3,replace=T))
sample(c(1:3,3),replace=T)
sample(c(1:3,3),replace=T)
sample(c(1:3,3),replace=T)
sample(c(1:3,3),replace=T)
sample(c(1:3,3),replace=T)
unique(sample(c(1:3,3),replace=T))
unique(sample(c(1:3,3),replace=T))
unique(sample(c(1:3,3),replace=T))
unique(sample(c(1:3,3),replace=T))
unique(sample(c(1:3,3),replace=T))
length(unique(sample(c(1:3,3),replace=T)))
length(unique(sample(c(1:3,3),replace=T)))
length(unique(sample(c(1:3,3),replace=T)))
length(unique(sample(c(1:3,3),replace=T)))
length(unique(sample(1:256,3000,replace=T)))
length(unique(sample(1:256,3000,replace=T)))
length(unique(sample(1:256,3000,replace=T)))
length(unique(sample(1:256,3000,replace=T)))
length(unique(sample(1:512,3000,replace=T)))
length(unique(sample(1:512,3000,replace=T)))
length(unique(sample(1:512,3000,replace=T)))
length(unique(sample(1:512,3000,replace=T)))
length(unique(sample(1:512,3000,replace=T)))
length(unique(sample(1:512,3000,replace=T)))
length(unique(sample(1:512,3000,replace=T)))
length(unique(sample(1:512,3000,replace=T)))
length(unique(sample(1:512,3000,replace=T)))
length(unique(sample(1:512,3000,replace=T)))
length(unique(sample(1:512,3000,replace=T)))
