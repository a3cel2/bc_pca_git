merge(as.data.frame(enh_table),as.data.frame(depl_table),by='row.names')
enh_table <- c()
depl_table <- c()
for(condition in unique(c(pca_enh$Condition,pca_depl$Condition))){
enh_table[[condition]] <- length(unique(dplyr::filter(pca_enh,Condition == condition)$PPI.long))
depl_table[[condition]] <- length(unique(dplyr::filter(pca_depl,Condition == condition)$PPI.long))
}
merge(as.data.frame(enh_table),as.data.frame(depl_table),by='row.names')
enh_table <- c()
depl_table <- c()
for(condition in unique(c(pca_enh$Condition,pca_depl$Condition))){
enh_table[[condition]] <- length(unique(dplyr::filter(pca_enh,Condition == condition)$PPI.long))
depl_table[[condition]] <- length(unique(dplyr::filter(pca_depl,Condition == condition)$PPI.long))
}
#enh_table <- table(pca_enh$Condition)
#depl_table <- table(pca_depl$Condition)
summary_table <- merge(as.data.frame(enh_table),as.data.frame(depl_table),by='row.names',all=T)
colnames(summary_table) <- c('Condition','Accumulated','Depleted')
#Sort
bar_order <- sort(apply(summary_table[,2:3],1,sum),index.return=T,decreasing=T)$ix
summary_table$Condition <- factor(summary_table$Condition,
levels=summary_table$Condition[bar_order])
#Make wide
summary_table <- tidyr::gather(summary_table,Condition)
colnames(summary_table) <- c('Condition','Direction','Frequency')
#Sort again, enhanced_first
summary_table$Direction<- factor(summary_table$Direction,
levels=c('Accumulated','Depleted'))
#summary_table[,2] <- as.factor(summary_table[,2])
#ggplot(data=summary_table, aes(x=Condition, y=Frequency, fill=Direction)) +
#  geom_bar(stat="identity", position=position_dodge()) + scale_fill_manual(values=rev(blue_black_orange(2)))
my_plot <- ggplot2::ggplot(data=summary_table, ggplot2::aes(x=Condition, y=Frequency, fill=Direction, width=.8)) +
ggplot2::geom_bar(stat="identity", position=ggplot2::position_dodge(), colour='black') +
ggplot2::scale_y_continuous(expand = c(0,0), limits=c(0,max(summary_table$Frequency)*1.05)) +
ggplot2::scale_fill_manual(values = rev(color_function(10)[c(2,9)])) +
ggplot2::ylab('Dynamic Complexes') +
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = "white"),
legend.position=c(0.8,0.8),
legend.text = ggplot2::element_text(size=15),
legend.title = ggplot2::element_text(size=20,hjust=0),
text = ggplot2::element_text(size=25),
axis.text.x = ggplot2::element_text(angle=90, hjust=1),
axis.line.x = ggplot2::element_line(size = 1, linetype = "solid", colour = "black"),
axis.line.y = ggplot2::element_line(size = 1, linetype = "solid", colour = "black"))
my_plot
color_function=gplots::redgreen
my_plot
enh_table
depl_table
enh_table <- table(pca_enh$Condition)
enh_table
epl_table <- table(pca_depl$Condition)
epl_table
head(pca_enh)
pca_enhanced <- pca_enh
real_edgelist_enhanced <- as.matrix(dplyr::filter(pca_enhanced_file,Condition==condition)
%>% dplyr::select(ORF.1,ORF.2))
pca_enhanced_file <- pca_enh
real_edgelist_enhanced <- as.matrix(dplyr::filter(pca_enhanced_file,Condition==condition)
%>% dplyr::select(ORF.1,ORF.2))
head(real_edgelist_enhanced)
dim(real_edgelist_enhanced)
dim(unique(real_edgelist_enhanced))
as.matrix(dplyr::filter(pca_universe,Condition==condition)
%>% dplyr::select(ORF.1,ORF.2))
pca_universe <- pca_univ
as.matrix(dplyr::filter(pca_universe,Condition==condition)
%>% dplyr::select(ORF.1,ORF.2))
dim(as.matrix(dplyr::filter(pca_universe,Condition==condition)
%>% dplyr::select(ORF.1,ORF.2)))
universe_matrix <- igraph::as_adjacency_matrix(igraph::graph_from_edgelist(as.matrix(potential_edgelist)))
potential_edgelist <- as.matrix(dplyr::filter(pca_universe,Condition==condition)
%>% dplyr::select(ORF.1,ORF.2))
universe_matrix <- igraph::as_adjacency_matrix(igraph::graph_from_edgelist(as.matrix(potential_edgelist)))
condition
universe_matrix
potential_edgelist <- unique(as.matrix(dplyr::filter(pca_universe,Condition==condition)
%>% dplyr::select(ORF.1,ORF.2)))
dim(potential_edgelist)
potential_nrow <- nrow(potential_edgelist)
potential_nrow
enh_tabe
enh_table
depl_table
depl_table$doxo
depl_table[['doxorubicin']]
enh_table[['doxorubicin']]
enh_table[['1181-0519']]
depl_table[['1181-0519']]
depl_table[['atorvastatin']]
enh_table[['atorvastatin']]
enh_table[['H2O2']]
depl_table[['H2O2']]
depl_table[['N-starvation']]
enh_table[['N-starvation']]
enh_table[['NaCl']]
depl_table[['NaCl']]
depl_table[['sorbitol']]
enh_table[['sorbitol']]
enh_table[['menadione']]
depl_table[['menadione']]
enh_table[['heat-shock']]
depl_table[['heat-shock']]
depl_table[['ethanol']]
enh_table[['ethanol']]
enh_table[['AA-mixture']]
depl_table[['AA-mixture']]
depl_table[['methionine']]
enh_table[['methionine']]
enh_table <- c()
depl_table <- c()
for(condition in unique(c(pca_enh$Condition,pca_depl$Condition))){
enh_table[[condition]] <- length(unique(dplyr::filter(pca_enh,Condition == condition)$PPI.long))
depl_table[[condition]] <- length(unique(dplyr::filter(pca_depl,Condition == condition)$PPI.long))
}
enh_table
depl_table
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R', echo=TRUE)
heatmap_output_path <- paste(c(output_path,'heatmaps'),collapse='/')
dir.create(heatmap_output_path, showWarnings = FALSE)
pca_file <- read.table(pca_universe,head=T,sep='\t')
pca_enh <- read.table(pca_enhanced_calls,head=T,sep='\t')
pca_depl <- read.table(pca_depleted_calls,head=T,sep='\t')
convert_pca_file_to_heatmap_format(pca_file=pca_file,
pca_enhanced_calls = pca_enh,
pca_depleted_calls = pca_depl,
output_path=heatmap_output_path,
filename='all_sig_bpcs.png',
draw=F,
label_size=5,
line_width=3,
row_names=F
)
inter_filename <- paste(c(saved_parameter_path,heatmap_cluster_file),collapse='/')
inters <- as.vector(read.table(inter_filename)[,1])
convert_pca_file_to_heatmap_format(pca_file=pca_file,
pca_enhanced_calls = pca_enh,
pca_depleted_calls = pca_depl,
output_path=heatmap_output_path,
filename='clusters_sig_bpcs.png',
draw=F,
label_size=4,
png_height=1500,
gene_dendrogram_width=0.12,
#png_width=1700,
row_label_size=3.5,
line_width=3,
interaction_subset=inters,
wide_margins=T,
legend=F
)
pca_file <- read.table(pca_universe,head=T,sep='\t')
pca_enh <- read.table(pca_enhanced_calls,head=T,sep='\t')
pca_depl <- read.table(pca_depleted_calls,head=T,sep='\t')
head(pca_file)
pca_enhanced_calls = pca_enh
pca_depleted_calls = pca_depl
tag_to_pair <- list()
for(i in 1:(nrow(pca_file)/length(unique(pca_file$Condition)))){
tag_to_pair[as.vector(pca_file[i,]$Tag)] <- as.vector(pca_file[i,]$PPI.short)
}
response_matr <- process_matrix_for_heatmap(pca_file,
pca_enh,
pca_depl,
centerings,
centering_type)
col_dist <- uncentered_correlation_dist(t(response_matr))
col_clust <- hclust(col_dist,method='complete')
col_optimization <- cba::order.optimal(col_dist,col_clust$merge)
col_clust$merge <- col_optimization$merge
col_clust$order <- col_optimization$order
col_clust <- as.dendrogram(col_clust)
source('~/Dropbox/Roth Lab/projects/bc_pca_git/packages/bcPcaAnalysis/R/heatmap_utilities.R', echo=TRUE)
color_function=blue_black_orange
min_heat_val=-1
min_heat_val=-1
max_heat_val=1
n_breaks=160
gene_dendrogram_width=0.25
condition_dendrogram_height=0.15
label_size=1
row_label_size=1
line_width=1
label_angle=90
row_names=T
centerings=c('gene','experiment')
centering_type=median
draw=T
legend=T
output_path='dummy'
filename='dummy'
png_width=1500
png_height=2000
wide_margins=F
interaction_subset=c()
tag_to_pair <- list()
for(i in 1:(nrow(pca_file)/length(unique(pca_file$Condition)))){
tag_to_pair[as.vector(pca_file[i,]$Tag)] <- as.vector(pca_file[i,]$PPI.short)
}
response_matr <- process_matrix_for_heatmap(pca_file,
pca_enh,
pca_depl,
centerings,
centering_type)
dim(response_matr)
max(response_matr)
response_matr
head(pca_file)
head(pca_enh)
head(pca_depl)
sig_pca <- rbind(pca_enhanced_calls,pca_depleted_calls)
simplified_pca_file <- dplyr::select(pca_file,Tag,Condition,FC.avg,FC.rep1,FC.rep2,q.val)
head(simplified_pca_file)
simplified_pca_file <- simplified_pca_file %>%
dplyr::group_by(Tag,Condition) %>%
dplyr::summarize(FC.avg=mean(FC.avg),FC.rep1=mean(FC.rep1),FC.rep2=mean(FC.rep2))
# if(length(interaction_subset) == 0){
simplified_pca_file <- simplified_pca_file %>%
dplyr::filter(Tag %in% sig_pca$Tag)
#  }
simplified_pca_file <- dplyr::select(simplified_pca_file,Tag,Condition,FC.rep1,FC.rep2)
head(simplified_pca_file)
rep1 <- simplified_pca_file %>% dplyr::select(-FC.rep2) %>% tidyr::spread(Condition,FC.rep1)
rep2 <- simplified_pca_file %>% dplyr::select(-FC.rep1) %>% tidyr::spread(Condition,FC.rep2)
head(rep1)
head(rep2)
response_matr <- merge(rep1,rep2,by='Tag')
rownames(response_matr) <- response_matr$Tag
response_matr <- as.matrix(response_matr[,-1])
head(response_matr)
response_matr - apply(response_matr,1,centering_type)
centering_type
centering_type(c(1,2))
centering_type(c(1,2,2))
head(response_matr)
sum(is.na(response_matr))
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R', echo=TRUE)
rmarkdown::render("manuscript_latex/figures/BC-PCA_Figure.1.Rmd", "pdf_document",output_dir=figure_path)
rmarkdown::render("manuscript_latex/figures/BC-PCA_Figure.1.Rmd", "pdf_document",output_dir=figure_path)
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R', echo=TRUE)
hub_df <- xlsx::read.xlsx2(hub_enrichment_file,sheetName = "Sheet1", colClasses=c("character","character",rep("numeric",5)))
my_predictions <- pca_ma_prediction(pca_universe,
protein_abundance_file,
expression_file,
'ethanol',
expression_condition_regexp='Ethanol.4h')
args(my_predictions)
args(pca_ma_prediction)
head(my_predictions)
cor(my_predictions$Log2_MA_prediction,my_predictions$bcPCA_FC.AVG)
filtered_predictions <- filter(my_predictions,
abs(bcPCA_FC.UP - bcPCA_FC.DN) <= measurement_diff_cutoff)
cor(filtered_predictions$Log2_MA_prediction,filtered_predictions$bcPCA_FC.AVG)
monochromatic_prediction_accuracy_graph(my_predictions,
hub_df,
output_path=expression_pca_output_path,
filename='hub_comparison')
getwd()
source('~/Dropbox/Roth Lab/projects/bc_pca_git/scripts/master.R', echo=TRUE)
hub_df <- dplyr::filter(hub_df,Condition==condition)
nonsig_hubs <- as.vector(as.matrix(hub_df %>% dplyr::filter(q.value.BH. > q_value_cutoff) %>% dplyr::select(Hub)))
sig_hubs <- as.vector(as.matrix(hub_df %>% dplyr::filter(q.value.BH. <= q_value_cutoff) %>% dplyr::select(Hub)))
nonsig_hubs <- reverse_map_gene_names(nonsig_hubs)
sig_hubs <- reverse_map_gene_names(sig_hubs)
sig_hub_predictions <- dplyr::filter(my_predictions,ORF1 %in% sig_hubs | ORF2 %in% sig_hubs, bcPCA_qVal <= q_value_cutoff, abs(bcPCA_FC.AVG) >= effect_size_cutoff, !is.na(Log2_MA_prediction))
nonsig_hub_predictions <- dplyr::filter(my_predictions,ORF1 %in% nonsig_hubs | ORF2 %in% nonsig_hubs, bcPCA_qVal <= q_value_cutoff, abs(bcPCA_FC.AVG) >= effect_size_cutoff, !is.na(Log2_MA_prediction))
sig_successes <- sum(sign(sig_hub_predictions$Log2_MA_prediction) == sign(sig_hub_predictions$bcPCA_FC.AVG))
sig_failures <- sum(sign(sig_hub_predictions$Log2_MA_prediction) != sign(sig_hub_predictions$bcPCA_FC.AVG))
nonsig_successes <- sum(sign(nonsig_hub_predictions$Log2_MA_prediction) == sign(nonsig_hub_predictions$bcPCA_FC.AVG))
nonsig_failures <- sum(sign(nonsig_hub_predictions$Log2_MA_prediction) != sign(nonsig_hub_predictions$bcPCA_FC.AVG))
#print(sig_successes)
#print(sig_failures)
test_statistic <- fisher.test(rbind(c(sig_successes,sig_failures),c(nonsig_successes,nonsig_failures)))
condition='ethanol'
q_value_cutoff=0.05
effect_size_cutoff=0.25
sig_cap_width=0.04
height_buffer=0.015
line_width=2
output_path='dummy'
filename='dummy'
hub_df <- dplyr::filter(hub_df,Condition==condition)
nonsig_hubs <- as.vector(as.matrix(hub_df %>% dplyr::filter(q.value.BH. > q_value_cutoff) %>% dplyr::select(Hub)))
sig_hubs <- as.vector(as.matrix(hub_df %>% dplyr::filter(q.value.BH. <= q_value_cutoff) %>% dplyr::select(Hub)))
nonsig_hubs <- reverse_map_gene_names(nonsig_hubs)
sig_hubs <- reverse_map_gene_names(sig_hubs)
sig_hub_predictions <- dplyr::filter(my_predictions,ORF1 %in% sig_hubs | ORF2 %in% sig_hubs, bcPCA_qVal <= q_value_cutoff, abs(bcPCA_FC.AVG) >= effect_size_cutoff, !is.na(Log2_MA_prediction))
nonsig_hub_predictions <- dplyr::filter(my_predictions,ORF1 %in% nonsig_hubs | ORF2 %in% nonsig_hubs, bcPCA_qVal <= q_value_cutoff, abs(bcPCA_FC.AVG) >= effect_size_cutoff, !is.na(Log2_MA_prediction))
sig_successes <- sum(sign(sig_hub_predictions$Log2_MA_prediction) == sign(sig_hub_predictions$bcPCA_FC.AVG))
sig_failures <- sum(sign(sig_hub_predictions$Log2_MA_prediction) != sign(sig_hub_predictions$bcPCA_FC.AVG))
nonsig_successes <- sum(sign(nonsig_hub_predictions$Log2_MA_prediction) == sign(nonsig_hub_predictions$bcPCA_FC.AVG))
nonsig_failures <- sum(sign(nonsig_hub_predictions$Log2_MA_prediction) != sign(nonsig_hub_predictions$bcPCA_FC.AVG))
#print(sig_successes)
#print(sig_failures)
test_statistic <- fisher.test(rbind(c(sig_successes,sig_failures),c(nonsig_successes,nonsig_failures)))
test_statistic
sig_conf_interval <- binom.test(sig_successes,sig_successes+sig_failures)
nonsig_conf_interval <- binom.test(nonsig_successes,nonsig_successes+nonsig_failures)
sig_conf_interval
nonsig_conf_interval
my_predictions <- filtered_predictions
hub_df <- dplyr::filter(hub_df,Condition==condition)
nonsig_hubs <- as.vector(as.matrix(hub_df %>% dplyr::filter(q.value.BH. > q_value_cutoff) %>% dplyr::select(Hub)))
sig_hubs <- as.vector(as.matrix(hub_df %>% dplyr::filter(q.value.BH. <= q_value_cutoff) %>% dplyr::select(Hub)))
nonsig_hubs <- reverse_map_gene_names(nonsig_hubs)
sig_hubs <- reverse_map_gene_names(sig_hubs)
sig_hub_predictions <- dplyr::filter(my_predictions,ORF1 %in% sig_hubs | ORF2 %in% sig_hubs, bcPCA_qVal <= q_value_cutoff, abs(bcPCA_FC.AVG) >= effect_size_cutoff, !is.na(Log2_MA_prediction))
nonsig_hub_predictions <- dplyr::filter(my_predictions,ORF1 %in% nonsig_hubs | ORF2 %in% nonsig_hubs, bcPCA_qVal <= q_value_cutoff, abs(bcPCA_FC.AVG) >= effect_size_cutoff, !is.na(Log2_MA_prediction))
sig_successes <- sum(sign(sig_hub_predictions$Log2_MA_prediction) == sign(sig_hub_predictions$bcPCA_FC.AVG))
sig_failures <- sum(sign(sig_hub_predictions$Log2_MA_prediction) != sign(sig_hub_predictions$bcPCA_FC.AVG))
nonsig_successes <- sum(sign(nonsig_hub_predictions$Log2_MA_prediction) == sign(nonsig_hub_predictions$bcPCA_FC.AVG))
nonsig_failures <- sum(sign(nonsig_hub_predictions$Log2_MA_prediction) != sign(nonsig_hub_predictions$bcPCA_FC.AVG))
#print(sig_successes)
#print(sig_failures)
test_statistic <- fisher.test(rbind(c(sig_successes,sig_failures),c(nonsig_successes,nonsig_failures)))
sig_conf_interval <- binom.test(sig_successes,sig_successes+sig_failures)$conf.int*100
nonsig_conf_interval <- binom.test(nonsig_successes,nonsig_successes+nonsig_failures)$conf.int*100
sig_conf_interval
nonsig_conf_interval
sig_conf_interval <- binom.test(sig_successes,sig_successes+sig_failures)
nonsig_conf_interval <- binom.test(nonsig_successes,nonsig_successes+nonsig_failures)
sig_conf_interval
nonsig_conf_interval
test_statistic <- fisher.test(rbind(c(sig_successes,sig_failures),c(nonsig_successes,nonsig_failures)))
test_statistic
draw=F
prediction_cutoffs = 'AUTO'
p_cutoff = 0.05
effect_size_cutoff = 0.25
bottom_predition_limit = -2.5
top_predition_limit = 2.5
line_width=3
percent_correct_predictions <- function(values,
labels,
prediction_cutoffs,
mode){
retlist <- sapply(prediction_cutoffs,function(cutoff){
if(mode=='enhanced'){
crit <- values >= cutoff
}
if(mode=='depleted'){
crit <- values <= cutoff
}
sum(labels[crit],na.rm=T)/sum(crit,na.rm=T)
})
return(retlist)
}
percent_correct_predictions()
create_bootstrap_polygon <- function(predictions,
values,
prediction_cutoffs,
mode,
boostrap_iters,
quantile_upper=0.95,
quantile_lower=0.05){
bootstrapped_vals <- sapply(1:bootstrap_iters,function(iter){
strap <- sample(1:length(predictions),replace=T)
percent_correct_predictions(predictions[strap],
values[strap],prediction_cutoffs,mode=mode)
})
lower_y <- apply(bootstrapped_vals,1,function(x){quantile(x,probs=quantile_lower,na.rm=T)})
upper_y <- apply(bootstrapped_vals,1,function(x){quantile(x,probs=quantile_upper,na.rm=T)})
return(cbind(c(prediction_cutoffs,rev(prediction_cutoffs)),
c(lower_y,rev(upper_y))))
}
mRNA_predictions <- my_predictions$Log2_MA_prediction
if(prediction_cutoffs == 'AUTO'){
prediction_cutoffs <- sort(unique(mRNA_predictions))
prediction_cutoffs <- prediction_cutoffs[prediction_cutoffs >= bottom_predition_limit &
prediction_cutoffs <= top_predition_limit]
}
enhanced <-  my_predictions$bcPCA_qVal <= p_cutoff & my_predictions$bcPCA_FC.AVG >= effect_size_cutoff
depleted <-  my_predictions$bcPCA_qVal <= p_cutoff & my_predictions$bcPCA_FC.AVG <= -(effect_size_cutoff)
depleted_cutoffs <- prediction_cutoffs[prediction_cutoffs <= 0]
enhanced_cutoffs <- prediction_cutoffs[prediction_cutoffs >= 0]
depleted_bpc_precision <- percent_correct_predictions(mRNA_predictions,depleted,depleted_cutoffs,mode='depleted')
enhanced_bpc_precision <- percent_correct_predictions(mRNA_predictions,enhanced,enhanced_cutoffs,mode='enhanced')
enhanced_bpc_precision
max(enhanced_bpc_precision)
max(depleted_bpc_precision)
depleted_bpc_precision
depleted_cutoffs
abs(depleted_cutoffs - 2)
which.min(abs(depleted_cutoffs - 2))
depleted_cutoffs[which.min(abs(depleted_cutoffs - 2))]
which.min(abs(depleted_cutoffs - 2))
depleted_cutoffs
which.min(abs(2-depleted_cutoffs))
abs(2-depleted_cutoffs)
depleted_cutoffs
abs(2+depleted_cutoffs)
depleted_cutoffs[which.min(abs(2+depleted_cutoffs))]
depleted_bpc_precision[which.min(abs(2+depleted_cutoffs))]
enhanced_bpc_precision[which.min(abs(2+enhanced_cutoffs))]
enhanced_bpc_precision[which.min(abs(2-enhanced_cutoffs))]
which.min(abs(2-enhanced_cutoffs))
enhanced_cutoffs
enhanced_cutoffs[570]
which.min(abs(2-enhanced_cutoffs))
enhanced_bpc_precision[which.min(abs(2-enhanced_cutoffs))]
depleted_bpc_precision[which.min(abs(2+depleted_cutoffs))]
rmarkdown::render("manuscript_latex/figures/BC-PCA_Figure.4.Rmd", "pdf_document",output_dir=figure_path)
rmarkdown::render("manuscript_latex/figures/BC-PCA-Figure.S3.Rmd", "pdf_document",output_dir=figure_path)
rmarkdown::render("manuscript_latex/figures/BC-PCA-Figure.S4.Rmd", "pdf_document",output_dir=figure_path)
}
rmarkdown::render("manuscript_latex/figures/BC-PCA-Figure.S4.Rmd", "pdf_document",output_dir=figure_path)
0.000015*(10e05)
0.00015*(10e05)
0.0000015*(10e05)
3394920750
log10(3394920750)
getwd()
setwd('data')
filtered_uni <- read.table('bcpca_univ_filtered.tsv')
head(filtered_uni)
filtered_uni <- read.table('bcpca_univ_filtered.tsv',head=T)
control_regexp='DMSO',condition_regexp='Treatment'
control_regexp='DMSO'
condition_regexp='Treatment'
pca_file <- filtered_uni
condition <- 'ethanol'
pca_cond <- dplyr::filter(pca_file, Condition == condition)
pca_cond_up <- dplyr::filter(pca_cond, UP.DN == 'uptag')
pca_cond_dn <- dplyr::filter(pca_cond, UP.DN == 'downtag')
dmso_cols <- grep('DMSO',colnames(pca_cond))
treatment_cols <- grep('Treatment',colnames(pca_cond))
p_cutoff = 0.05
head(pca_cond)
pca_cond_up <- filter(pca_cond, UP.DN == 'uptag')
pca_cond_up <- dplyr::filter(pca_cond, UP.DN == 'uptag')
pca_cond_dn <- dplyr::filter(pca_cond, UP.DN == 'dntag')
fit2_dn <- pca_cond_up$q.val
fit2_up <- pca_cond_up$q.val
fit2_dn <- pca_cond_dn$q.val
sum(fit2_dn < p_cutoff & fit2_up < p_cutoff)
fit2_dn
head(pca_cond_up)
head(pca_cond_dn)
pca_cond_dn <- dplyr::filter(pca_cond, UP.DN == 'downtag')
fit2_dn <- pca_cond_dn$q.val
sum(fit2_dn < p_cutoff & fit2_up < p_cutoff)
abs_fc_up <- pca_cond_up$FC.avg
abs_fc_dn <- pca_cond_dn$FC.avg
abs_fc_up <- abs(pca_cond_up$FC.avg)
abs_fc_dn <- abs(pca_cond_dn$FC.avg)
fc_cutoff <- 0.25
sum(fit2_dn < p_cutoff & fit2_up < p_cutoff & abs_fc_up > 0.25)
sum(fit2_dn < p_cutoff & fit2_up < p_cutoff & abs_fc_up > 0.25 & abs_fc_dn > 0.25)
sum(fit2_dn < p_cutoff & fit2_up < p_cutoff & abs_fc_up > fc_cutoff & abs_fc_dn > fc_cutoff)
pca_enhanced_calls = '../data/external/Additional.file.10.txt'
pca_depleted_calls = '../data/external/Additional.file.11.txt'
pca_enh <- read.table(pca_enhanced_calls)
pca_enh <- read.table(pca_enhanced_calls,sep='\t',head=T)
pca_depl <- read.table(pca_depleted_calls,sep='\t',head=T)
head(pca_enh)
head(pca_depl)
nrow(dplyr::filter(pca_enh,Condition=='ethanol'))
nrow(dplyr::filter(pca_depl,Condition=='ethanol'))
198+187
sum(fit2_dn < p_cutoff & fit2_up < p_cutoff & abs_fc_up > fc_cutoff & abs_fc_dn > fc_cutoff)
head(pca_enh)
head(pca_cond_dn)
library(dplyr)
filter(pca_cond_dn,PPI.long=='RPT5_F1::RPT4_F3')
head(pca_enh)
head(filter(pca_enh,Condition=='ethanol'))
dim(filter(pca_enh,Condition=='ethanol'))
filter(pca_cond_up,PPI.long=='RPT5_F1::RPT4_F3')
dim(filter(pca_depl,Condition=='ethanol'))
fc_dn <- pca_cond_dn$FC.avg
fc_up <- pca_cond_up$FC.avg
sum(fit2_dn < p_cutoff & fit2_up < p_cutoff & fc_up > fc_cutoff & fc_dn > fc_cutoff)
sum(fit2_dn < p_cutoff & fit2_up < p_cutoff & fc_up < fc_cutoff & fc_dn < fc_cutoff)
a <- 5
-a
sum(fit2_dn < p_cutoff & fit2_up < p_cutoff & fc_up < -fc_cutoff & fc_dn < -fc_cutoff)
source('~/.active-rstudio-document', echo=TRUE)
warnings()
p_cutoff
fc_cutoff
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dim(enh_sig)
enh_sig
head(pca_cond_u[])
head(pca_cond_up)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
10^10/(20000)
10^10/(10000)
(10^10/(10000))*5
(15^10/(10000))*5
((15*10^9)/(10000))*5
900/7
0.74*130
0.2*130
26*(50*10^6)
74*(50*10^6)
3*74*(50*10^6)
74*(50*10^6)
0.74*(50*10^6)
(0.74*(50*10^6))*130
(0.74*(50*10^6))*(900/7)
